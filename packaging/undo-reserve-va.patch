diff -ruN qemu-0.14.1/cpu-all.h qemu-new/cpu-all.h
--- qemu-0.14.1/cpu-all.h	2011-05-07 03:01:43.000000000 +0800
+++ qemu-new/cpu-all.h	2011-07-04 09:53:26.589237420 +0800
@@ -627,12 +627,9 @@
 #if defined(CONFIG_USE_GUEST_BASE)
 extern unsigned long guest_base;
 extern int have_guest_base;
-extern unsigned long reserved_va;
 #define GUEST_BASE guest_base
-#define RESERVED_VA reserved_va
 #else
 #define GUEST_BASE 0ul
-#define RESERVED_VA 0ul
 #endif
 
 /* All direct uses of g2h and h2g need to go away for usermode softmmu.  */
diff -ruN qemu-0.14.1/linux-user/elfload.c qemu-new/linux-user/elfload.c
--- qemu-0.14.1/linux-user/elfload.c	2011-07-04 09:53:11.030237420 +0800
+++ qemu-new/linux-user/elfload.c	2011-07-04 09:53:52.604237433 +0800
@@ -1582,7 +1582,7 @@
      * In case where user has not explicitly set the guest_base, we
      * probe here that should we set it automatically.
      */
-    if (!(have_guest_base || reserved_va)) {
+    if (!have_guest_base) {
         /*
          * Go through ELF program header table and find the address
          * range used by loadable segments.  Check that this is available on
diff -ruN qemu-0.14.1/linux-user/main.c qemu-new/linux-user/main.c
--- qemu-0.14.1/linux-user/main.c	2011-05-07 03:01:44.000000000 +0800
+++ qemu-new/linux-user/main.c	2011-07-04 09:53:26.592237417 +0800
@@ -44,7 +44,6 @@
 #if defined(CONFIG_USE_GUEST_BASE)
 unsigned long guest_base;
 int have_guest_base;
-unsigned long reserved_va;
 #endif
 
 static const char *interp_prefix = CONFIG_QEMU_INTERP_PREFIX;
@@ -2642,7 +2641,6 @@
            "-0 argv0          forces target process argv[0] to be argv0\n"
 #if defined(CONFIG_USE_GUEST_BASE)
            "-B address        set guest_base address to address\n"
-           "-R size           reserve size bytes for guest virtual address space\n"
 #endif
            "\n"
            "Debug options:\n"
@@ -2846,39 +2844,6 @@
         } else if (!strcmp(r, "B")) {
            guest_base = strtol(argv[optind++], NULL, 0);
            have_guest_base = 1;
-        } else if (!strcmp(r, "R")) {
-            char *p;
-            int shift = 0;
-            reserved_va = strtoul(argv[optind++], &p, 0);
-            switch (*p) {
-            case 'k':
-            case 'K':
-                shift = 10;
-                break;
-            case 'M':
-                shift = 20;
-                break;
-            case 'G':
-                shift = 30;
-                break;
-            }
-            if (shift) {
-                unsigned long unshifted = reserved_va;
-                p++;
-                reserved_va <<= shift;
-                if (((reserved_va >> shift) != unshifted)
-#if HOST_LONG_BITS > TARGET_VIRT_ADDR_SPACE_BITS
-                    || (reserved_va > (1ul << TARGET_VIRT_ADDR_SPACE_BITS))
-#endif
-                    ) {
-                    fprintf(stderr, "Reserved virtual address too big\n");
-                    exit(1);
-                }
-            }
-            if (*p) {
-                fprintf(stderr, "Unrecognised -R size suffix '%s'\n", p);
-                exit(1);
-            }
 #endif
         } else if (!strcmp(r, "drop-ld-preload")) {
             (void) envlist_unsetenv(envlist, "LD_PRELOAD");
@@ -2967,34 +2932,6 @@
      * proper page alignment for guest_base.
      */
     guest_base = HOST_PAGE_ALIGN(guest_base);
-
-    if (reserved_va) {
-        void *p;
-        int flags;
-
-        flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_NORESERVE;
-        if (have_guest_base) {
-            flags |= MAP_FIXED;
-        }
-        p = mmap((void *)guest_base, reserved_va, PROT_NONE, flags, -1, 0);
-        if (p == MAP_FAILED) {
-            fprintf(stderr, "Unable to reserve guest address space\n");
-            exit(1);
-        }
-        guest_base = (unsigned long)p;
-        /* Make sure the address is properly aligned.  */
-        if (guest_base & ~qemu_host_page_mask) {
-            munmap(p, reserved_va);
-            p = mmap((void *)guest_base, reserved_va + qemu_host_page_size,
-                     PROT_NONE, flags, -1, 0);
-            if (p == MAP_FAILED) {
-                fprintf(stderr, "Unable to reserve guest address space\n");
-                exit(1);
-            }
-            guest_base = HOST_PAGE_ALIGN((unsigned long)p);
-        }
-        qemu_log("Reserved 0x%lx bytes of guest address space\n", reserved_va);
-    }
 #endif /* CONFIG_USE_GUEST_BASE */
 
     /*
diff -ruN qemu-0.14.1/linux-user/mmap.c qemu-new/linux-user/mmap.c
--- qemu-0.14.1/linux-user/mmap.c	2011-05-07 03:01:44.000000000 +0800
+++ qemu-new/linux-user/mmap.c	2011-07-04 09:53:26.592237417 +0800
@@ -216,40 +216,6 @@
 
 unsigned long last_brk;
 
-/* Subroutine of mmap_find_vma, used when we have pre-allocated a chunk
-   of guest address space.  */
-static abi_ulong mmap_find_vma_reserved(abi_ulong start, abi_ulong size)
-{
-    abi_ulong addr;
-    abi_ulong last_addr;
-    int prot;
-    int looped = 0;
-
-    if (size > RESERVED_VA) {
-        return (abi_ulong)-1;
-    }
-
-    last_addr = start;
-    for (addr = start; last_addr + size != addr; addr += qemu_host_page_size) {
-        if (last_addr + size >= RESERVED_VA
-            || (abi_ulong)(last_addr + size) < last_addr) {
-            if (looped) {
-                return (abi_ulong)-1;
-            }
-            last_addr = qemu_host_page_size;
-            addr = 0;
-            looped = 1;
-            continue;
-        }
-        prot = page_get_flags(addr);
-        if (prot) {
-            last_addr = addr + qemu_host_page_size;
-        }
-    }
-    mmap_next_start = addr;
-    return last_addr;
-}
-
 /*
  * Find and reserve a free memory area of size 'size'. The search
  * starts at 'start'.
@@ -271,10 +237,6 @@
 
     size = HOST_PAGE_ALIGN(size);
 
-    if (RESERVED_VA) {
-        return mmap_find_vma_reserved(start, size);
-    }
-
     addr = start;
     wrapped = repeat = 0;
     prev = 0;
@@ -342,7 +304,7 @@
         munmap(ptr, size);
 
         /* ENOMEM if we checked the whole of the target address space.  */
-        if (addr == (abi_ulong)-1) {
+        if (addr == -1ul) {
             return (abi_ulong)-1;
         } else if (addr == 0) {
             if (wrapped) {
@@ -563,47 +525,6 @@
     return -1;
 }
 
-static void mmap_reserve(abi_ulong start, abi_ulong size)
-{
-    abi_ulong real_start;
-    abi_ulong real_end;
-    abi_ulong addr;
-    abi_ulong end;
-    int prot;
-
-    real_start = start & qemu_host_page_mask;
-    real_end = HOST_PAGE_ALIGN(start + size);
-    end = start + size;
-    if (start > real_start) {
-        /* handle host page containing start */
-        prot = 0;
-        for (addr = real_start; addr < start; addr += TARGET_PAGE_SIZE) {
-            prot |= page_get_flags(addr);
-        }
-        if (real_end == real_start + qemu_host_page_size) {
-            for (addr = end; addr < real_end; addr += TARGET_PAGE_SIZE) {
-                prot |= page_get_flags(addr);
-            }
-            end = real_end;
-        }
-        if (prot != 0)
-            real_start += qemu_host_page_size;
-    }
-    if (end < real_end) {
-        prot = 0;
-        for (addr = end; addr < real_end; addr += TARGET_PAGE_SIZE) {
-            prot |= page_get_flags(addr);
-        }
-        if (prot != 0)
-            real_end -= qemu_host_page_size;
-    }
-    if (real_start != real_end) {
-        mmap(g2h(real_start), real_end - real_start, PROT_NONE,
-                 MAP_FIXED | MAP_ANONYMOUS | MAP_PRIVATE | MAP_NORESERVE,
-                 -1, 0);
-    }
-}
-
 int target_munmap(abi_ulong start, abi_ulong len)
 {
     abi_ulong end, real_start, real_end, addr;
@@ -651,11 +572,7 @@
     ret = 0;
     /* unmap what we can */
     if (real_start < real_end) {
-        if (RESERVED_VA) {
-            mmap_reserve(real_start, real_end - real_start);
-        } else {
-            ret = munmap(g2h(real_start), real_end - real_start);
-        }
+        ret = munmap(g2h(real_start), real_end - real_start);
     }
 
     if (ret == 0)
@@ -673,18 +590,12 @@
 
     mmap_lock();
 
-    if (flags & MREMAP_FIXED) {
+    if (flags & MREMAP_FIXED)
         host_addr = (void *) syscall(__NR_mremap, g2h(old_addr),
                                      old_size, new_size,
                                      flags,
-                                     g2h(new_addr));
-
-        if (RESERVED_VA && host_addr != MAP_FAILED) {
-            /* If new and old addresses overlap then the above mremap will
-               already have failed with EINVAL.  */
-            mmap_reserve(old_addr, old_size);
-        }
-    } else if (flags & MREMAP_MAYMOVE) {
+                                     new_addr);
+    else if (flags & MREMAP_MAYMOVE) {
         abi_ulong mmap_start;
 
         mmap_start = mmap_find_vma(0, new_size);
@@ -697,29 +608,9 @@
                                          old_size, new_size,
                                          flags | MREMAP_FIXED,
                                          g2h(mmap_start));
-            if ( RESERVED_VA ) {
-                mmap_reserve(old_addr, old_size);
-            }
         }
     } else {
-        int prot = 0;
-        if (RESERVED_VA && old_size < new_size) {
-            abi_ulong addr;
-            for (addr = old_addr + old_size;
-                 addr < old_addr + new_size;
-                 addr++) {
-                prot |= page_get_flags(addr);
-            }
-        }
-        if (prot == 0) {
-            host_addr = mremap(g2h(old_addr), old_size, new_size, flags);
-            if (host_addr != MAP_FAILED && RESERVED_VA && old_size > new_size) {
-                mmap_reserve(old_addr + old_size, new_size - old_size);
-            }
-        } else {
-            errno = ENOMEM;
-            host_addr = MAP_FAILED;
-        }
+	host_addr = mremap(g2h(old_addr), old_size, new_size, flags);
         /* Check if address fits target address space */
         if ((unsigned long)host_addr + new_size > (abi_ulong)-1) {
             /* Revert mremap() changes */
diff -ruN qemu-0.14.1/qemu-doc.texi qemu-new/qemu-doc.texi
--- qemu-0.14.1/qemu-doc.texi	2011-05-07 03:01:44.000000000 +0800
+++ qemu-new/qemu-doc.texi	2011-07-04 09:53:26.593237417 +0800
@@ -2230,7 +2230,7 @@
 @subsection Command line options
 
 @example
-usage: qemu-i386 [-h] [-d] [-L path] [-s size] [-cpu model] [-g port] [-B offset] [-R size] program [arguments...]
+usage: qemu-i386 [-h] [-d] [-L path] [-s size] [-cpu model] [-g port] [-B offset] program [arguments...]
 @end example
 
 @table @option
